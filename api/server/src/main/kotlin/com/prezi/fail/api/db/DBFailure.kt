package com.prezi.fail.api.db

import com.amazonaws.services.dynamodbv2.datamodeling.*

import com.prezi.fail.api.extensions.getAtMillis
import com.prezi.fail.api.extensions.setAtMillis
import com.prezi.fail.api.Failure
import com.prezi.fail.api.FailureStatus

// If anyone has infinite time, this could be generated.

[DynamoDBTable(tableName = "fail_Failure")]
class DBFailure([DynamoDBIgnore] val model: Failure = Failure()) {
    [DynamoDBAutoGeneratedKey]
    [DynamoDBHashKey(attributeName = "Id")]
    public var id: String? = null

    [DynamoDBAttribute(attributeName = "At")]
    public fun getAt(): Long? = model.getAt()
    public fun setAt(v: Long?): DBFailure? { model.setAt(v); return this }

    [DynamoDBIgnore]
    public fun getAtMillis(): Long? = model.getAtMillis()
    public fun setAtMillis(v: Long?): DBFailure? { model.setAtMillis(v); return this }

    [DynamoDBAttribute(attributeName = "Status")]
    [DynamoDBMarshalling(marshallerClass = javaClass<EnumMarshaller>())]
    public fun getStatus(): FailureStatus? = model.getStatus()
    public fun setStatus(v: FailureStatus?): DBFailure? { model.setStatus(v); return this }

    [DynamoDBAttribute(attributeName = "Log")]
    public fun getLog(): String? = model.getLog()
    public fun setLog(v: String?): DBFailure? { model.setLog(v); return this }

    protected var _scheduledFailureId: String? = null

    [DynamoDBAttribute(attributeName = "ScheduledFailureId")]
    public fun getScheduledFailureId(): String? = _scheduledFailureId
    public fun setScheduledFailureId(v: String?): DBFailure? { _scheduledFailureId = v; return this }

    public fun setScheduledFailure(f: DBScheduledFailure): DBFailure? = setScheduledFailureId(f.id)
    public fun getScheduledFailure(mapper: DynamoDBMapper): DBScheduledFailure? =
            mapper.load(javaClass<DBScheduledFailure>(), _scheduledFailureId)

    public override fun toString(): String = "${id}${model}"
}
